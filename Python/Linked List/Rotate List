class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or k == 0:
            return head
        
        # Step 1: Calculate the length of the linked list and find the tail
        length = 1
        tail = head
        while tail.next:
            length += 1
            tail = tail.next
        
        # Adjust k to be within the range of the list length
        k = k % length
        if k == 0:
            return head
        
        # Step 2: Find the new tail (nth node from the beginning) and the new head (n-kth node)
        new_tail_index = length - k - 1
        new_tail = head
        for _ in range(new_tail_index):
            new_tail = new_tail.next
        
        new_head = new_tail.next
        
        # Step 3: Break the list at new_tail and reconnect it
        new_tail.next = None
        tail.next = head
        
        return new_head
