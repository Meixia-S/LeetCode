MY SOLUTION: too slow

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int ans = 0;
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        for (Integer in: nums) {
            maxHeap.add(in);
        }

        for (int i = 0; i < k; i ++) {
            if (i == k - 1) {
                ans = maxHeap.poll();
            }
            maxHeap.poll();
        }

        return ans;
    }
}

___________________________________________________________________________________________
OTHER SOLUTION: O(n)

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int i = 0; i < k; i++) {
            minHeap.offer(nums[i]);
        }     
        
        for (int i = k; i < nums.length; i++) {
            if (nums[i] > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(nums[i]);
            }
        }
        
        return minHeap.peek();
    }
}