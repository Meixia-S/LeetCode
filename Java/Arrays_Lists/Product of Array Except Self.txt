Using Three Arrays 0(N) space and time:

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int pre[] = new int[n];
        int suff[] = new int[n];
        pre[0] = 1;
        suff[n - 1] = 1;
        
        for(int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] * nums[i - 1];
            System.out.println("pre " +  i + ": " + pre[i]);
        }
        for(int i = n - 2; i >= 0; i--) {
            suff[i] = suff[i + 1] * nums[i + 1];
            System.out.println("suff " +  i + ": " + suff[i]);
        }
        
        int ans[] = new int[n];
        for(int i = 0; i < n; i++) {
            ans[i] = pre[i] * suff[i];
            System.out.println("ans " +  i + ": " + suff[i] + " * " + pre[i]);
        }
        return ans;
    }
}

___________________________________________________________________________________________
BETTER SOLUTION: USING ONE ARRAY

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int ans[] = new int[nums.length];
        ans[0] = 1;
    
        for(int i = 1; i < nums.length; i++) {
            ans[i] = nums[i - 1] * ans[i - 1];
        }

        int post = 1;
        for(int i = nums.length - 2; i >= 0; i--) {
            post = post * nums[i + 1];
            ans[i] = post * ans[i];
        }
        return ans;
    }
}