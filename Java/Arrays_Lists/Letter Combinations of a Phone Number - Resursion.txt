class Solution {
    String[] keypad={"0","1","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        ArrayList<String> ans = new ArrayList<>();
       
        if (digits.length() == 0) {
            return ans;
        } else {
            StringBuilder helper_string = new StringBuilder();
            recursive(digits, ans, 0, helper_string);
            return ans;
        }
    }
    
    public void recursive(String digits, ArrayList<String> ans, int index, StringBuilder helper_string) {
        if (index == digits.length()) {
            ans.add(helper_string.toString());
            return;
        }

        int curr_digit = digits.charAt(index)-'0';

        for (int i = 0; i < keypad[curr_digit].length(); i ++) {
            helper_string.append( keypad[curr_digit].charAt(i));
            recursive(digits, ans, index + 1, helper_string);
            helper_string.deleteCharAt(helper_string.length() - 1);
        }
    }    
}