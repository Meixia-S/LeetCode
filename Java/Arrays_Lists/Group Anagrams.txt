MY SOLUTION:

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> ans = new ArrayList<>();
        HashMap<String, List<String>> checker = new HashMap<>();
        
        for (int i = 0; i < strs.length; i ++) {
            List<String> temp =  new ArrayList<>();
        
            for (int l = 0; l < strs[i].length(); l ++) {
                temp.add(String.valueOf(strs[i].charAt(l))); 
            }
            Collections.sort(temp);
            String currWord = String.join("", temp);
            if (checker.containsKey(currWord)) {
                List<String> curr = checker.get(currWord);
                curr.add(strs[i]);
                checker.put(currWord, curr);
            } else {
                List<String> newEntry = new ArrayList<String>();
                newEntry.add(strs[i]);
                checker.put(currWord, newEntry);
            }  
        }
        
        for (Map.Entry<String, List<String>> entry : checker.entrySet()) {
            Collections.sort(entry.getValue());
            ans.add(entry.getValue());
        }
        ans.sort(Comparator.comparingInt(List::size));
        return ans;
    }
}

___________________________________________________________________________________________
OTHER SOLUTION:

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        HashMap<String, List<String>> map = new HashMap<>();
        
        for (String word: strs) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String sortedWord = new String(chars);

            if (!map.containsKey(sortedWord)) {
                map.put(sortedWord, new ArrayList<>());
            }

            map.get(sortedWord).add(word);
        }

        return new ArrayList<>(map.values());
    }
}