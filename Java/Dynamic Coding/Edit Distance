class Solution {
    public int minDistance(String word1, String word2) {
    int[][] dp = new int[word1.length() + 1][word2.length() + 1];

    // Initialize the base case: transforming an empty string to any other string
    for (int i = 0; i <= word1.length(); i++) {
        dp[i][0] = i;  // Delete all characters of word1 to make it empty
    }
    for (int j = 0; j <= word2.length(); j++) {
        dp[0][j] = j;  // Insert all characters of word2 to make word1 match word2
    }

    // Fill the DP table
    for (int i = 1; i <= word1.length(); i++) {
        for (int j = 1; j <= word2.length(); j++) {
            if (word1.charAt(i - 1) != word2.charAt(j - 1)) {
                dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;
            } else {
                dp[i][j] = dp[i - 1][j - 1];  // No operation needed if characters match
            }
        }
    }

    return dp[word1.length()][word2.length()];
    }
}
