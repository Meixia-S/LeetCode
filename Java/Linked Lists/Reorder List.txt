/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    // could use array but that requires more space!
    // we are simple reversing the links between nodes of second half
    // then we are merging the first and second portions together
    // we also want to use slow and fast pointer to find the middle

    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }
        
        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode second = slow.next;
        slow.next = null;
        ListNode prev = null;

        // reversing the second half of the linkedlist
        while(second != null)   {
            ListNode temp = second.next;
            second.next = prev;
            prev = second;
            second = temp;
        }

        // second is null and prev is the last node we looked at
        // aka the new head
        ListNode first = head;
        second = prev;

        // the second half could be shorter than the first
        while (second != null) {
            ListNode temp1 = first.next;
            ListNode temp2 = second.next;
            first.next = second;
            second.next = temp1;
            first = temp1;
            second = temp2;
        }
    }
}
