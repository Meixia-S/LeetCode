// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node, Node> nodes = new HashMap<>();
        nodes.put(null, null); // edge case
        Node curr = head;
      
        // going through and making a deep copy of each node in head
        while (curr != null) {
            Node copy = new Node(curr.val);
            nodes.put(curr, copy);
            curr = curr.next;
        }

        // going through again and getting the pointers set
        curr = head;
        while (curr != null) {
            Node copy = nodes.get(curr);
            copy.next = nodes.get(curr.next);
            copy.random = nodes.get(curr.random);
            curr = curr.next;
        }
        return nodes.get(head);
    }
}