class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<>();
        helper(ans, new ArrayList<>(), candidates, target, 0, 0);
        return ans;
    }

    public void helper( List<List<Integer>> ans,  List<Integer> sub, int[] candidates, int target, int sum, int start) {
        if (sum == target) {
            ans.add(new ArrayList<>(sub));
        }

        for (int i = start; i < candidates.length; i ++) {
            if (i != start && candidates[i] == candidates[i - 1]) {
                continue;
            } else if (sum + candidates[i] <= target) {
                sub.add(candidates[i]);
                sum += candidates[i];
                helper(ans, sub, candidates, target, sum, i + 1);
                sub.remove(sub.size() - 1);
                sum -= candidates[i];
            }
        }
    }
}