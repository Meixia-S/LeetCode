class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        helper(ans, new ArrayList<>(), s, 0, "");
        return ans;
    }

    public void helper(List<List<String>> ans, List<String> subsets, String s, int index, String cur) {
        for (int i = index; i < s.length(); i ++) {
            cur += String.valueOf(s.charAt(i));
            if (isPalendrome(cur)) {
                subsets.add(cur);
                helper(ans, subsets, s, i + 1, "");
                subsets.remove(subsets.size() - 1);
            }
        }
 
        if (index == s.length()) {
            ans.add(new ArrayList<>(subsets));
        }
    }

    public boolean isPalendrome(String cur) {
        if (cur.length() == 1) {
            return true;
        }
        int left = 0;
        int right = cur.length() - 1;

        for (int i = 0; i < cur.length()/2; i ++) {
            if (cur.charAt(left) != cur.charAt(right)) {
                return false;
            }
            left ++;
            right --;
        }
        return true;
    }
}