class Solution {
    HashMap<Character, String> map = new HashMap<>();

    public List<String> letterCombinations(String digits) {
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        List<String> ans = new ArrayList<>();
       
        if (digits.length() == 0) {
            return ans;
        } else {
            recursive(ans, digits, 0, new StringBuilder());
            return ans;
        }
    }
    
    public void recursive(List<String> ans, String digits, int index, StringBuilder cur) {
        if (index >= digits.length()) {
            ans.add(cur.toString());
            return;
        }

        String val = map.get(digits.charAt(index));
        for (int i = 0; i < val.length(); i ++) {
            cur.append(val.charAt(i));
            recursive(ans, digits, index + 1, cur);
            cur.setLength(cur.length() - 1);
        }
    }    
}