____________________________________________________________________________________________
OTHER SOLUTION:

import java.util.HashMap;

class Solution {
    public String minWindow(String s, String t) {
        // Base case
        if (t.isEmpty()) {
            return "";
        }

        HashMap<Character, Integer> countT = new HashMap<>();
        HashMap<Character, Integer> window = new HashMap<>();

        // Get all the chars in t to the hashmap
        for (char c : t.toCharArray()) {
            countT.put(c, countT.getOrDefault(c, 0) + 1);
        }

        // Initializing all the method-wide variables
        int have = 0;
        int need = countT.size();
        int[] res = {-1, -1};
        int resLen = Integer.MAX_VALUE;
        int l = 0;

        // Now we want to go through s
        for (int r = 0; r < s.length(); r++) {
            // Adding the chars and their frequency counter in map
            char c = s.charAt(r);
            window.put(c, window.getOrDefault(c, 0) + 1);

            // Determining if we have the correct chars in current window
            if (countT.containsKey(c) && window.get(c).intValue() == countT.get(c).intValue()) {
                have++;
            }

            // Creates the smallest window possible with all chars
            while (have == need) {
                // Update the result if we find a smaller valid substring
                if ((r - l + 1) < resLen) {
                    res[0] = l;
                    res[1] = r;
                    resLen = (r - l + 1);
                }

                // We decrement this to make window smaller in map
                char leftChar = s.charAt(l);
                window.put(leftChar, window.get(leftChar) - 1);

                // If us making it smaller made it too small
                // We want to decrement the have variable
                if (countT.containsKey(leftChar) && window.get(leftChar) < countT.get(leftChar)) {
                    have--;
                }

                // We just removed a char on the left
                l++;
            }
        }

        // Making res have the correct left and right indexes
        l = res[0];
        int r = res[1];

        // We check to see that resLen is no longer infinity since 
        // There is a chance there is no valid subString
        return resLen != Integer.MAX_VALUE ? s.substring(l, r + 1) : "";
    }
}

