class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        int[] parent = new int[n + 1];
        
        // Initialize each node's parent as itself
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            int rootU = find(u, parent);
            int rootV = find(v, parent);
            
            // If both nodes share the same root, this edge forms a cycle
            if (rootU == rootV) {
                return edge;
            }
            
            // Otherwise, union the components
            parent[rootU] = rootV;
        }
        
        return new int[0];
    }
    
    private int find(int x, int[] parent) {
        if (x != parent[x]) {
            parent[x] = find(parent[x], parent); // Path compression
        }
        return parent[x];
    }
}
