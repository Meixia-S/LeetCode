class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> perm =  new ArrayList<>();
        if (nums.length == 1) {
            ans.add(new ArrayList<>(List.of(nums[0])));
            return ans;
        } else {
            boolean[] used = new boolean[nums.length];
            recursive(nums, ans, perm, used);
            return ans;
        }
    }
    
    public void recursive(int[] nums, List<List<Integer>> ans, List<Integer> perm, boolean[] used) {
        if (perm.size() == nums.length) {
            ans.add(new ArrayList<>(perm));
        }
        for (int i = 0; i < nums.length; i ++) {
            if (used[i]) {
                continue;
            } else {
                perm.add(nums[i]);
                used[i] = true;
                recursive(nums, ans, perm, used);
                used[i] = false;
                perm.remove(perm.size() - 1);
            } 
        }
    }
}